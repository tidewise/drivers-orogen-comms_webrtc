# frozen_string_literal: true

name "comms_webrtc"
# Optionally declare the version number
# version "0.1"

import_types_from "comms_webrtcTypes.hpp"
import_types_from "iodrivers_base"
import_types_from "base"

using_library "libdatachannel", typekit: false
using_library "jsoncpp", typekit: false

task_context "Task" do
    needs_configuration

    # Timeout to wait for a remote peer answer
    property "wait_remote_peer_time_out", "base/Time"

    # Timeout to wait for the websocket open/close
    property "websocket_time_out", "base/Time"

    # Timeout to wait for the peerconnection open/close
    property "peer_connection_time_out", "base/Time"

    # Timeout to wait the datachannel open/close
    property "data_channel_time_out", "base/Time"

    # Stun server (e.g stun:stun.l.google.com:19302)
    property "stun_server", "std/string"

    # Local peer id
    property "local_peer_id", "std/string"

    # Remote peer id (if it is not given by default, the component
    # will be able to just answer first, then get the remote ip from
    # the riquired peer connection)
    property "remote_peer_id", "std/string"

    # Data channel label (only needed if you intend to send an offer)
    property "data_channel_label", "std/string"

    # Websocket server name (e.g. 127.0.0.1:3012)
    property "signaling_server_name", "std/string"

    # Rawdata in
    input_port "data_in", "iodrivers_base/RawPacket"

    # Rawdata out
    output_port "data_out", "iodrivers_base/RawPacket"

    # Status output
    output_port "status", "comms_webrtc/WebRTCState"

    port_driven
end
